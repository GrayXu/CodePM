#!/bin/bash
#
# Copyright 2018, University of California, San Diego
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The argument parsing part of this bash script is generated by
# https://argbash.io/generate using the following configurations.
#
# ARG_OPTIONAL_SINGLE([ntth],        [t], [threshold for movnt-based memcpy], [64])
# ARG_OPTIONAL_SINGLE([message],     [m], [note message for this run])
#
# ARG_OPTIONAL_BOOLEAN([pmem],        [], [treat target file in configuration on pmem device], [on])
# ARG_OPTIONAL_BOOLEAN([clflushopt],  [], [use clflushopt (if available) for persistence], [on])
# ARG_OPTIONAL_BOOLEAN([clwb],        [], [use clwb (if available) for persistence], [on])
# ARG_OPTIONAL_BOOLEAN([movnt],       [], [use movnt (sse2/avx/avx512f) for persistence], [on])
# ARG_OPTIONAL_BOOLEAN([avx],         [], [use avx for non-temporal memcpy to pmem], [on])
# ARG_OPTIONAL_BOOLEAN([avx512f],     [], [use avx512f for non-temporal memcpy to pmem], [off])
#
# ARG_OPTIONAL_SINGLE([interleave],  [i], [set a memory interleave policy; same argument for numactl], [all])
# ARG_OPTIONAL_SINGLE([cpunodebind], [N], [only execute command on the CPUs of nodes; same argument for numactl], [0])
#
# ARG_OPTIONAL_BOOLEAN([gdb],        [d], [run the benchmark with gdb], [off])
# ARG_OPTIONAL_BOOLEAN([report],     [r], [report results of interest], [off])
# ARG_OPTIONAL_BOOLEAN([append],     [a], [append report to <bench>.rpt], [off])
#
# ARG_POSITIONAL_SINGLE([cfg],            [benchmark configuration file (*.cfg)])
#
# ARG_HELP([Run a benchmark and report results])
#
# ARGBASH_SET_INDENT([    ])
# ARGBASH_GO

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option()
{
    local first_option all_short_options
    all_short_options='tmiNdrah'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_ntth="256"
_arg_message=
_arg_pmem="on"
_arg_clflushopt="on"
_arg_clwb="on"
_arg_movnt="on"
_arg_avx="on"
_arg_avx512f="off"
_arg_interleave="all"
_arg_cpunodebind="0"
_arg_gdb="off"
_arg_report="off"
_arg_append="off"

# coding param by default
_arg_zone_rows="10"
_arg_zone_rows_parity="1"

print_help ()
{
    printf '%s\n' "Run a benchmark and report results"
    printf 'Usage: %s [-t|--ntth <arg>] [-m|--message <arg>] [--(no-)pmem] [--(no-)clflushopt] [--(no-)clwb] [--(no-)movnt] [--(no-)avx] [--(no-)avx512f] [-i|--interleave <arg>] [-N|--cpunodebind <arg>] [--zone-rows <arg>] [--zone-rows-parity <arg>] [-d|--(no-)gdb] [-r|--(no-)report] [-a|--(no-)append] [-h|--help] <cfg>\n' "$0"
    printf '\t%s\n' "<cfg>: benchmark configuration file (*.cfg)"
    printf '\t%s\n' "-t,--ntth: threshold for movnt-based memcpy (default: '256')"
    printf '\t%s\n' "-m,--message: note message for this run (no default)"
    printf '\t%s\n' "--pmem,--no-pmem: treat target file in configuration on pmem device (on by default)"
    printf '\t%s\n' "--clflushopt,--no-clflushopt: use clflushopt (if available) for persistence (on by default)"
    printf '\t%s\n' "--clwb,--no-clwb: use clwb (if available) for persistence (on by default)"
    printf '\t%s\n' "--movnt,--no-movnt: use movnt (sse2/avx/avx512f) for persistence (on by default)"
    printf '\t%s\n' "--avx,--no-avx: use avx for non-temporal memcpy to pmem (on by default)"
    printf '\t%s\n' "--avx512f,--no-avx512f: use avx512f for non-temporal memcpy to pmem (off by default)"
    printf '\t%s\n' "-i,--interleave: set a memory interleave policy; same argument for numactl (default: 'all')"
    printf '\t%s\n' "-N,--cpunodebind: only execute command on the CPUs of nodes; same argument for numactl (default: '0')"
    printf '\t%s\n' "--zone-rows: the number of rows (default: '10', only support 10~100)"
    printf '\t%s\n' "--zone-rows-parity: the number of parity rows (default '1', only support 1~2)"
    printf '\t%s\n' "-d,--gdb,--no-gdb: run the benchmark with gdb (off by default)"
    printf '\t%s\n' "-r,--report,--no-report: report results of interest (off by default)"
    printf '\t%s\n' "-a,--append,--no-append: append report to <bench>.rpt (off by default)"
    printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -t|--ntth)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_ntth="$2"
                shift
                ;;
            --ntth=*)
                _arg_ntth="${_key##--ntth=}"
                ;;
            -t*)
                _arg_ntth="${_key##-t}"
                ;;
            -m|--message)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_message="$2"
                shift
                ;;
            --message=*)
                _arg_message="${_key##--message=}"
                ;;
            -m*)
                _arg_message="${_key##-m}"
                ;;
            --no-pmem|--pmem)
                _arg_pmem="on"
                test "${1:0:5}" = "--no-" && _arg_pmem="off"
                ;;
            --no-clflushopt|--clflushopt)
                _arg_clflushopt="on"
                test "${1:0:5}" = "--no-" && _arg_clflushopt="off"
                ;;
            --no-clwb|--clwb)
                _arg_clwb="on"
                test "${1:0:5}" = "--no-" && _arg_clwb="off"
                ;;
            --no-movnt|--movnt)
                _arg_movnt="on"
                test "${1:0:5}" = "--no-" && _arg_movnt="off"
                ;;
            --no-avx|--avx)
                _arg_avx="on"
                test "${1:0:5}" = "--no-" && _arg_avx="off"
                ;;
            --no-avx512f|--avx512f)
                _arg_avx512f="on"
                test "${1:0:5}" = "--no-" && _arg_avx512f="off"
                ;;
            -i|--interleave)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_interleave="$2"
                shift
                ;;
            --interleave=*)
                _arg_interleave="${_key##--interleave=}"
                ;;
            -i*)
                _arg_interleave="${_key##-i}"
                ;;
            -N|--cpunodebind)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_cpunodebind="$2"
                shift
                ;;
            --cpunodebind=*)
                _arg_cpunodebind="${_key##--cpunodebind=}"
                ;;
            -N*)
                _arg_cpunodebind="${_key##-N}"
                ;;
            --zone-rows=*)
                _arg_zone_rows="${_key##--zone-rows=}"
                ;;
            --zone-rows-parity=*)
                _arg_zone_rows_parity="${_key##--zone-rows-parity=}"
                ;;
            -d|--no-gdb|--gdb)
                _arg_gdb="on"
                test "${1:0:5}" = "--no-" && _arg_gdb="off"
                ;;
            -d*)
                _arg_gdb="on"
                _next="${_key##-d}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -r|--no-report|--report)
                _arg_report="on"
                test "${1:0:5}" = "--no-" && _arg_report="off"
                ;;
            -r*)
                _arg_report="on"
                _next="${_key##-r}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -a|--no-append|--append)
                _arg_append="on"
                test "${1:0:5}" = "--no-" && _arg_append="off"
                ;;
            -a*)
                _arg_append="on"
                _next="${_key##-a}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-a" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _positionals+=("$1")
                ;;
        esac
        shift
    done
}

handle_passed_args_count ()
{
    _required_args_string="'cfg'"
    test ${#_positionals[@]} -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
    test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
    _positional_names=('_arg_cfg' )

    for (( ii = 0; ii < ${#_positionals[@]}; ii++))
    do
        eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

#                                                                              #
# -------------------------- end of argument parsing ------------------------- #
#                                                                              #

cpunodebind=$_arg_cpunodebind
interleave=$_arg_interleave
# numacmd="numactl --interleave=$interleave --cpunodebind $cpunodebind"
numacmd="numactl --cpubind=$cpunodebind --membind=$cpunodebind"

print_pmdk_env ()
{
    echo
    echo "PMEM_IS_PMEM_FORCE        = $PMEM_IS_PMEM_FORCE"
    echo "PMEM_NO_CLFLUSHOPT        = $PMEM_NO_CLFLUSHOPT"
    echo "PMEM_NO_CLWB              = $PMEM_NO_CLWB"
    echo "PMEM_NO_MOVNT             = $PMEM_NO_MOVNT"
    echo "PMEM_AVX                  = $PMEM_AVX"
    echo "PMEM_AVX512F              = $PMEM_AVX512F"
    echo "PMEM_MOVNT_THRESHOLD      = $PMEM_MOVNT_THRESHOLD"

    echo "PANGOLIN_ZONE_ROWS        = $PANGOLIN_ZONE_ROWS"
    echo "PANGOLIN_ZONE_ROWS_PARITY = $PANGOLIN_ZONE_ROWS_PARITY"
    echo
    echo "NUMA CPU Node             = $cpunodebind"
    echo "NUMA Interleave           = $interleave"
    echo
}

#
# Set environment variables for benchmarking.
# Each NAME has to match what defined in source files.
#

export PMEM_IS_PMEM_FORCE=$(expr "$_arg_pmem" == "on")
export PMEM_NO_CLFLUSHOPT=$(expr "$_arg_clflushopt" == "off")
export PMEM_NO_CLWB=$(expr "$_arg_clwb" == "off")
export PMEM_NO_MOVNT=$(expr "$_arg_movnt" == "off")
export PMEM_AVX=$(expr "$_arg_avx" == "on")
export PMEM_AVX512F=$(expr "$_arg_avx512f" == "on")
export PMEM_MOVNT_THRESHOLD=$_arg_ntth

export PANGOLIN_ZONE_ROWS=$_arg_zone_rows
export PANGOLIN_ZONE_ROWS_PARITY=$_arg_zone_rows_parity

# export PANGOLIN_ZERO_HEAP=1  # init heap with zero

# export PANGOLIN_RCLOCK_THRESHOLD=8192

# export PANGOLIN_GET_VERIFY_CSUM=1

# export PANGOLIN_SCRUB_TXS=1000000

# export PANGOLIN_SCRUB_SEC=1
# export PANGOLIN_SCRUB_MSEC=10

#
# Run benchmark.
#
bench=$(basename $_arg_cfg .cfg)

#
# Possibly distinguish debug and nondebug builds.
#
build="pmdk"

print_pmdk_env

echo -n "Running benchmark [$_arg_cfg] with build [$build] .."
test -n "$_arg_message" && echo " $_arg_message" || echo
echo

if   [ "$_arg_gdb" == "on" ]; then
    gdb --args ./pmembench $_arg_cfg
elif [ "$_arg_report" == "off" ]; then
    echo "sudo PMEM_AVX512F=$(expr "$_arg_avx512f" == "on") PANGOLIN_ZONE_ROWS=$_arg_zone_rows PANGOLIN_ZONE_ROWS_PARITY=$_arg_zone_rows_parity $numacmd ./pmembench $_arg_cfg"
    sudo TCMALLOC_LARGE_ALLOC_REPORT_THRESHOLD=1000000000000 PMEM_AVX512F=$(expr "$_arg_avx512f" == "on") PANGOLIN_ZONE_ROWS=$_arg_zone_rows PANGOLIN_ZONE_ROWS_PARITY=$_arg_zone_rows_parity $numacmd ./pmembench $_arg_cfg
else
    csvfile=bench_results/$bench.csv
    echo "runbench result file" > $csvfile
    echo "#build: $build" >> $csvfile
    # Use stdbuf to minimize pipe buffering.
    # stdbuf -oL -eL ./pmembench $_arg_cfg 2>&1 | tee -a $csvfile
    echo "sudo PMEM_AVX512F=$(expr "$_arg_avx512f" == "on") PANGOLIN_ZONE_ROWS=$_arg_zone_rows PANGOLIN_ZONE_ROWS_PARITY=$_arg_zone_rows_parity $numacmd ./pmembench $_arg_cfg 2>&1 | tee -a $csvfile"
    sudo TCMALLOC_LARGE_ALLOC_REPORT_THRESHOLD=1000000000000 PMEM_AVX512F=$(expr "$_arg_avx512f" == "on") PANGOLIN_ZONE_ROWS=$_arg_zone_rows PANGOLIN_ZONE_ROWS_PARITY=$_arg_zone_rows_parity $numacmd ./pmembench $_arg_cfg 2>&1 | tee -a $csvfile
fi

# gen html
# if [ "$_arg_report" == "on" ]; then
#     if [ "$_arg_append" == "off" ]; then
#         echo; ./benchreport $csvfile
#     else
#         rptfile=bench_results/$bench.rpt
#         (printf '=%.0s' {1..130}; echo) >> $rptfile
#         echo -n "$(date) - [$build]" >> $rptfile
#         test -n "$_arg_message" && echo -n " - $_arg_message" >> $rptfile
#         (echo; print_pmdk_env) >> $rptfile
#         ./benchreport $csvfile 2>&1 | tee -a $rptfile
#     fi
# fi