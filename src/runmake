#!/bin/bash
#
# Copyright 2018, University of California, San Diego
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The argument parsing part of this bash script is generated by
# https://argbash.io/generate using the following configurations.

# ARG_OPTIONAL_SINGLE([watch],        [w], [watch build status in tmux (e.g. watch:0.1)])
#
# ARG_OPTIONAL_BOOLEAN([clang],          , [use clang and clang++ as compilers], [off])
# ARG_OPTIONAL_BOOLEAN([probe],          , [enable probes for profiling], [off])
#
# ARG_OPTIONAL_BOOLEAN([metarep],     [m], [enable pool's metadata replication], [off])
# ARG_OPTIONAL_BOOLEAN([logrep],      [l], [enable transaction logs replication], [off])
# ARG_OPTIONAL_BOOLEAN([parity],      [p], [enable zone parity for object data redundancy], [off])
# ARG_OPTIONAL_BOOLEAN([checksum],    [c], [enable pool's metadata and per-object checksums], [off])
# ARG_OPTIONAL_BOOLEAN([rclockhle],   [e], [enable hardware lock elision for range column locks], [off])
#
# ARG_POSITIONAL_SINGLE([target],          [make target (default, clobber, check, test)], [default])
#
# ARG_HELP([Build PMDK with different configurations])
#
# ARGBASH_SET_INDENT([    ])
# ARGBASH_GO

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option()
{
    local first_option all_short_options
    all_short_options='wmlpceh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_target="default"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_watch=
_arg_clang="off"
_arg_probe="off"
_arg_metarep="off"
_arg_logrep="off"
_arg_parity="off"
_arg_checksum="off"
_arg_rclockhle="off"

print_help ()
{
    printf '%s\n' "Build PMDK with different configurations"
    printf 'Usage: %s [-w|--watch <arg>] [--(no-)clang] [--(no-)probe] [-m|--(no-)metarep] [-l|--(no-)logrep] [-p|--(no-)parity] [-c|--(no-)checksum] [-e|--(no-)rclockhle] [-h|--help] [<target>]\n' "$0"
    printf '\t%s\n' "<target>: make target (default, clobber, check, test) (default: 'default')"
    printf '\t%s\n' "-w,--watch: watch build status in tmux (e.g. watch:0.1) (no default)"
    printf '\t%s\n' "--clang,--no-clang: use clang and clang++ as compilers (off by default)"
    printf '\t%s\n' "--probe,--no-probe: enable probes for profiling (off by default)"
    printf '\t%s\n' "-m,--metarep,--no-metarep: enable pool's metadata replication (off by default)"
    printf '\t%s\n' "-l,--logrep,--no-logrep: enable transaction logs replication (off by default)"
    printf '\t%s\n' "-p,--parity,--no-parity: enable zone parity for object data redundancy (off by default)"
    printf '\t%s\n' "-c,--checksum,--no-checksum: enable pool's metadata and per-object checksums (off by default)"
    printf '\t%s\n' "-e,--rclockhle,--no-rclockhle: enable hardware lock elision for range column locks (off by default)"
    printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -w|--watch)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_watch="$2"
                shift
                ;;
            --watch=*)
                _arg_watch="${_key##--watch=}"
                ;;
            -w*)
                _arg_watch="${_key##-w}"
                ;;
            --no-clang|--clang)
                _arg_clang="on"
                test "${1:0:5}" = "--no-" && _arg_clang="off"
                ;;
            --no-probe|--probe)
                _arg_probe="on"
                test "${1:0:5}" = "--no-" && _arg_probe="off"
                ;;
            -m|--no-metarep|--metarep)
                _arg_metarep="on"
                test "${1:0:5}" = "--no-" && _arg_metarep="off"
                ;;
            -m*)
                _arg_metarep="on"
                _next="${_key##-m}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-m" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -l|--no-logrep|--logrep)
                _arg_logrep="on"
                test "${1:0:5}" = "--no-" && _arg_logrep="off"
                ;;
            -l*)
                _arg_logrep="on"
                _next="${_key##-l}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-l" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -p|--no-parity|--parity)
                _arg_parity="on"
                test "${1:0:5}" = "--no-" && _arg_parity="off"
                ;;
            -p*)
                _arg_parity="on"
                _next="${_key##-p}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -c|--no-checksum|--checksum)
                _arg_checksum="on"
                test "${1:0:5}" = "--no-" && _arg_checksum="off"
                ;;
            -c*)
                _arg_checksum="on"
                _next="${_key##-c}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -e|--no-rclockhle|--rclockhle)
                _arg_rclockhle="on"
                test "${1:0:5}" = "--no-" && _arg_rclockhle="off"
                ;;
            -e*)
                _arg_rclockhle="on"
                _next="${_key##-e}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-e" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _positionals+=("$1")
                ;;
        esac
        shift
    done
}

handle_passed_args_count ()
{
    test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
    _positional_names=('_arg_target' )

    for (( ii = 0; ii < ${#_positionals[@]}; ii++))
    do
        eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

#                                                                              #
# -------------------------- end of argument parsing ------------------------- #
#                                                                              #

print_make_env ()
{
    echo "CC                 = $CC"
    echo "CXX                = $CXX"
    echo
    echo "PROBE              = $PROBE"
    echo
    echo "PANGOLIN           = $PANGOLIN"
    echo "PANGOLIN_METAREP   = $PANGOLIN_METAREP"
    echo "PANGOLIN_LOGREP    = $PANGOLIN_LOGREP"
    echo "PANGOLIN_PARITY    = $PANGOLIN_PARITY"
    echo "PANGOLIN_CHECKSUM  = $PANGOLIN_CHECKSUM"
    echo "PANGOLIN_RCLOCKHLE = $PANGOLIN_RCLOCKHLE"
    echo
    echo "Make Target        = $_arg_target"
}

test "$_arg_clang" == "on" && export CC=clang CXX=clang++

test "$_arg_probe" == "on" && export PROBE=1

# this branch uses #ifdef PANGOLIN to highlight added/modified code
export PANGOLIN=1
# export SANITIZE=address # for using address sanitizer
test "$_arg_logrep" == "on" && export PANGOLIN_LOGREP=1
test "$_arg_metarep" == "on" && export PANGOLIN_METAREP=1
test "$_arg_parity" == "on" && export PANGOLIN_PARITY=1
test "$_arg_checksum" == "on" && export PANGOLIN_CHECKSUM=1
test "$_arg_rclockhle" == "on" && export PANGOLIN_RCLOCKHLE=1

# sanity-check make target
case $_arg_target in
    show|default|clobber|test|check) ;;
    *) die "Unknown make target: $_arg_target" 1 ;;
esac

if [ $_arg_target == "show" ]; then
    for d in "debug nondebug"; do
        echo $d; ls -ltr --color=always $d; echo;
    done
    exit 0
fi

if [ -n "$_arg_watch" ]; then
  # tmux send -t $_arg_watch C-z
    tmux send -t $_arg_watch "cmatrix" ENTER
fi

print_make_env; echo
cpus=$(getconf _NPROCESSORS_ONLN)

if [ $_arg_target == "default" ]; then
    cscope -Rbq
    make -C libpmemobj isa_l # hack solution; better add it to Makefile
    make -j$cpus
elif [ $_arg_target == "clobber" ]; then
    make -C libpmemobj isa_l_clean
    make -j$cpus clobber
else
    make -j$cpus $_arg_target
fi

if [ -n "$_arg_watch" ]; then
    tmux send -t $_arg_watch "q" ENTER
  # tmux send -t $_arg_watch "fg" ENTER
fi

echo; print_make_env
